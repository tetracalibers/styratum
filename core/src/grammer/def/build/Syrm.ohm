SkipToken {  
  /* override */
  space := whitespace | lineTerminator | comment
  
  /* comment */
  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" any)* "*/"
  singleLineComment = "//" (~lineTerminator any)*
  
  /* special character */
  whitespace = "\t"
             | "\x0B"    -- verticalTab
             | "\x0C"    -- formFeed
             | " "
             | "\u00A0"  -- noBreakSpace
             | "\uFEFF"  -- byteOrderMark
             | unicodeSpaceSeparator

  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"
  
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
}

// nondivisible

Atomic <: SkipToken {
  atomic = addedAtomic | pureAtomic
  
  pureAtomic = number | unit | operator | string | jsIdentifier
  addedAtomic = props
    
  /* props */
  props = "props" "(" jsIdentifier ")"
  
  /* numeral */
  number = 
    | "-" digit+ -- negative
    | digit+ -- positive
  
  /* unit */
  unit = lowerCase | "%"
  
  /* operator */
  operator = "-" | "+" | "*" | "**" | "/"
  
  /* string */
  string = lowerCase | kebabCase | pascalCase | camelCase
  lowerCase = lower+
  kebabCase = lower ("-" | lower)*
  pascalCase = (upper (lower | digit)*)+
  camelCase = lower (letter | digit)*
  
  /* jsIdentifier */
  jsIdentifier = letter (letter | digit | "_")*
}

// Combination of Atomic and Molecule

Primitive <: Atomic {
  Formula = FormulaElements (operator FormulaElements)*
  FormulaElements = 
    | numeral -- number
    | "(" AtomicFormula ")" -- expression
  AtomicFormula = numeral (operator numeral)+
  numeral = numeralWithUnit | number | props
  numeralWithUnit = numeral unit
}

SyrmInterface <: Primitive {
  Syrm = ""
  
  CascadeRegion = ""
  CollectionRegion = ""
  
  SyrmedCss = ""
  DeclarationStatement = ""
  RuleSet = ""
  SelectorList = ""
  DeclarationBlock = ""
  PropertyName = ""
  PropertyValue = ""
}

PropertyValue <: SyrmInterface {
  PropertyValue := PropertyValueBase | kebabCase | pascalCase
  PropertyValueBase = props | PropertyValueFunc | Formula
  PropertyValueFunc = kebabCase "(" Formula ("," Formula)* ")"
}

PropertyName <: SyrmInterface {
  pureAtomic += collectionKeyword
  
  PropertyName := kebabCase | collectionKeyword
  
  collectionKeyword = "@" "collection"
}

SelectorList <: SyrmInterface {
  pureAtomic += combinator | constantSelector
  addedAtomic += nthConst | tagSelector
  
  /* -------------------------------------------------------------------------- */
  /* selector list                                                              */
  /* -------------------------------------------------------------------------- */
  
  SelectorList := Selector ("," Selector)*
  
  /* -------------------------------------------------------------------------- */
  /* selector                                                                   */
  /* -------------------------------------------------------------------------- */
  
  /* Selector */
  Selector = AtomicSelector SelectorElem*
  SelectorElem = 
    | combinator ~"&" AtomicSelector -- edge
    | ~"&" AtomicSelector -- node
  AtomicSelector = 
    | basicSelector PseudoSelector -- composite
    | basicSelector -- basic
    | PseudoSelector -- omission
  basicSelector = attributeSelector | htmlTagSelector | constantSelector
  
  /* attributeSelector */
  attributeSelector = "[" kebabCase "=" lowerCase "]"
  
  /* tagSelector */
  tagSelector = htmlTagSelector | jsxTagSelector
  htmlTagSelector = lower (digit | lower)*
  jsxTagSelector = pascalCase
  
  /* atomic Selector */
  constantSelector = rootSelector | universalSelector
  rootSelector = "&"
  universalSelector = "*"
  
  /* -------------------------------------------------------------------------- */
  /* pseudo                                                                     */
  /* -------------------------------------------------------------------------- */
  
  /* Pseudo Selector */
  PseudoSelector = 
    | Pseudo -- atom
    | ~PseudoFunc Pseudo Pseudo* -- molecule
  
  /* Pseudo */
  Pseudo = PseudoFunc | PseudoElement | PseudoClass
  PseudoFunc = 
    | PseudoElement "(" PseudoArg ")" -- element
    | PseudoClass "(" PseudoArg ")" -- class
  PseudoElement = "::" kebabCase
  PseudoClass = ":" kebabCase
  PseudoArg = nth | props | Selector | letter+ | digit+ 
  
  /* pseudo helper */
  nth = nthConst | nthInject
  nthConst = "n" "+" digit+
  nthInject = "n" "+" props
  
  /* -------------------------------------------------------------------------- */
  /* combinator                                                                 */
  /* -------------------------------------------------------------------------- */
  combinator = adjacentSiblijngCombinator | generalSiblijngCombinator | childCombinator | columnCombinator
  adjacentSiblijngCombinator = "+"
  generalSiblijngCombinator = "~"
  childCombinator = ">"
  columnCombinator = "||"
}

DeclarationBlock <: SyrmInterface {
  DeclarationBlock := "{" DeclarationList "}"
  
  DeclarationList = Declaration+
  Declaration = PropertyName ":" PropertyValue+ ";"
}

RuleSet <: SyrmInterface {
  RuleSet = SelectorList DeclarationBlock
}

DeclarationStatement <: SyrmInterface {
  pureAtomic += else | invert
  addedAtomic += truthy | falsy | exist
  
  /* -------------------------------------------------------------------------- */
  /* declaration statement                                                      */
  /* -------------------------------------------------------------------------- */
  
  DeclarationStatement := 
    | DeclarationsBlockWithPrefix DeclarationsBlock* syrmSuffixAnnotation -- surrounded
    | DeclarationsBlockWithPrefix syrmBetweenAnnotation DeclarationsBlock -- between
    | DeclarationsBlockWithPrefix -- prefixed
    | DeclarationsBlock -- basic
  DeclarationsBlockWithPrefix = syrmPrefixAnnotation DeclarationsBlock
  
  /* -------------------------------------------------------------------------- */
  /* annotation                                                                 */
  /* -------------------------------------------------------------------------- */
  preAnnotation = truthy | falsy | exist
  midAnnotation = else
  sufAnnotation = invert
    
  truthy = "@" "truthy" "(" jsIdentifier ")"
  falsy = "@" "falsy" "(" jsIdentifier")"
  exist = "@" "exist" "(" jsIdentifier ")"
  else = "@" "else"
  invert = "@" "invert"
}

SyrmedCss <: SyrmInterface {
  SyrmedCss := DeclarationStatement*
}

CascadeRegion <: SyrmInterface {
  CascadeRegion := SyrmedCss
}

CollectionRegion <: SyrmInterface {
  CollectionRegion := Namespace<pascalCase>*
    
  Namespace<TagName> = "<" TagName ">" space* SyrmedCss space* "</" TagName ">"
}

Syrm <: SyrmInterface {
  Syrm := Block*
  
  Block = CascadeBlock | CollectionBlock | Block
  
  CascadeBlock = "<Cascade>" space* CascadeRegion space* "</Cascade>"
  CollectionBlock = "<Collection>" space* CollectionRegion space* "</Collection>"
}
Base {
  /* override */
  space := whitespace | lineTerminator | comment
  
  /* root */
  Root = ""
  
  /* -------------------------------------------------------------------------- */
  /* syrm suppport                                                              */
  /* -------------------------------------------------------------------------- */
  
  propsFunc = "props" "(" jsIdentifier ")"
    
  /* -------------------------------------------------------------------------- */
  /* util                                                                       */
  /* -------------------------------------------------------------------------- */
  
  /* math */
  Formula = FormulaElements (mathOperator FormulaElements)* -- recursive
  FormulaElements = 
    | numeral -- number
    | "(" AtomicFormula ")" -- expression
  AtomicFormula = numeral (mathOperator numeral)+
  numeral = numeralWithUnit | numeralOnly | propsFunc
  numeralOnly = 
    | "-" digit+ -- negative
    | digit+ -- positive
  numeralWithUnit = numeral unit
  unit = lowerCase | "%"
  mathOperator = "-" | "+" | "*" | "**" | "/"
  
  /* string */
  lowerCase = lower+
  kebabCase = lower ("-" | lower)*
  pascalCase = (upper (lower | digit)*)+
  camelCase = lower (letter | digit)*
  jsIdentifier = letter (letter | digit | "_")*
  
  /* comment */
  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" any)* "*/"
  singleLineComment = "//" (~lineTerminator any)*
  
  /* special character */
  whitespace = "\t"
             | "\x0B"    -- verticalTab
             | "\x0C"    -- formFeed
             | " "
             | "\u00A0"  -- noBreakSpace
             | "\uFEFF"  -- byteOrderMark
             | unicodeSpaceSeparator

  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"
  
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
}

SyrmedCss <: Base {
  /* -------------------------------------------------------------------------- */
  /* syrm support                                                               */
  /* -------------------------------------------------------------------------- */

  syrmPrefixAnnotation = truthyKeyword | falsyKeyword | existKeyword
  syrmBetweenAnnotation = elseKeyword
  syrmSuffixAnnotation = invertKeyword
    
  truthyKeyword = "@" "truthy" "(" jsIdentifier ")"
  falsyKeyword = "@" "falsy" "(" jsIdentifier")"
  existKeyword = "@" "exist" "(" jsIdentifier ")"
  elseKeyword = "@" "else"
  invertKeyword = "@" "invert"
  collectionKeyword = "@" "collection"
  
  /* -------------------------------------------------------------------------- */
  /* css base                                                                   */
  /* -------------------------------------------------------------------------- */
  
  /* property value */
  PropertyValueBase = propsFunc | PropertyValueFunc | Formula
  PropertyValueFunc = kebabCase "(" Formula ("," Formula)* ")"
  
  /* selector */
  constantSelector = rootSelector | universalSelector
  
  /* pseudo helper */
  nth = 
    | "n" "+" digit+ -- basic
    | "n" "+" propsFunc -- inject
  
  /* named Selector */
  attributeSelector = "[" kebabCase "=" lowerCase "]"
  htmlTagSelector = lower (digit | lower)*
  jsxTagSelector = pascalCase
  
  /* atomic Selector */
  rootSelector = "&"
  universalSelector = "*"
  
  /* whole combinator */
  combinator = adjacentSiblijngCombinator | generalSiblijngCombinator | childCombinator | columnCombinator
  
  /* atomic combinator */
  adjacentSiblijngCombinator = "+"
  generalSiblijngCombinator = "~"
  childCombinator = ">"
  columnCombinator = "||"
}

SyrmCascade <: SyrmedCss {
  /* root */
  Root := Block*
  
  /* -------------------------------------------------------------------------- */
  /* block                                                                      */
  /* -------------------------------------------------------------------------- */
  
  Block = 
    | DeclarationsBlockWithPrefix DeclarationsBlock* syrmSuffixAnnotation -- surrounded
    | DeclarationsBlockWithPrefix syrmBetweenAnnotation DeclarationsBlock -- between
    | DeclarationsBlockWithPrefix -- prefixed
    | DeclarationsBlock -- basic
  DeclarationsBlockWithPrefix = syrmPrefixAnnotation DeclarationsBlock
  DeclarationsBlock = SelectorList "{" DeclarationList "}"
  
  /* -------------------------------------------------------------------------- */
  /* Declaration                                                                */
  /* -------------------------------------------------------------------------- */
  
  DeclarationList = Declaration+
  Declaration = propertyName ":" PropertyValue+ ";"
  
  /* -------------------------------------------------------------------------- */
  /* property name                                                              */
  /* -------------------------------------------------------------------------- */
  
  propertyName = kebabCase | collectionKeyword
  
  /* -------------------------------------------------------------------------- */
  /* property Value                                                             */
  /* -------------------------------------------------------------------------- */
  
  PropertyValue = PropertyValueBase | kebabCase | pascalCase
  
  /* -------------------------------------------------------------------------- */
  /* Selector                                                                   */
  /* -------------------------------------------------------------------------- */
  
  /* Selector list */
  SelectorList = Selector ("," Selector)*
  
  /* Selector */
  Selector = AtomicSelector SelectorElem*
  SelectorElem = 
    | combinator ~"&" AtomicSelector -- edge
    | ~"&" AtomicSelector -- node
  AtomicSelector = 
    | basicSelector PseudoSelector -- composite
    | basicSelector -- basic
    | PseudoSelector -- omission
  
  /* whole Selector */
  basicSelector = attributeSelector | htmlTagSelector | constantSelector
  
  /* Pseudo Selector */
  PseudoSelector = 
    | Pseudo -- atom
    | ~PseudoFunc Pseudo Pseudo* -- molecule
  
  /* Pseudo */
  Pseudo = PseudoFunc | PseudoElement | PseudoClass
  PseudoFunc = 
    | PseudoElement "(" PseudoArg ")" -- element
    | PseudoClass "(" PseudoArg ")" -- class
  PseudoElement = "::" kebabCase
  PseudoClass = ":" kebabCase
  PseudoArg = nth | propsFunc | Selector | letter+ | digit+ 
}

SyrmCollection <: SyrmedCss {
  /* root */
  Root := Def<pascalCase>*
    
  Def<TagName> = "<" TagName ">" space* Block* space* "</" TagName ">"
  
  /* -------------------------------------------------------------------------- */
  /* block                                                                      */
  /* -------------------------------------------------------------------------- */
  
  Block = 
    | DeclarationsBlockWithPrefix syrmBetweenAnnotation DeclarationsBlock -- between
    | DeclarationsBlockWithPrefix -- prefixed
    | DeclarationsBlock -- basic
  DeclarationsBlockWithPrefix = syrmPrefixAnnotation DeclarationsBlock
  DeclarationsBlock = SelectorList "{" DeclarationList "}"
  
  /* -------------------------------------------------------------------------- */
  /* Declaration                                                                */
  /* -------------------------------------------------------------------------- */
  
  DeclarationList = Declaration+
  Declaration = propertyName ":" PropertyValue+ ";"
  
  /* -------------------------------------------------------------------------- */
  /* property name                                                              */
  /* -------------------------------------------------------------------------- */
  
  /* 
    @diff
      - collectionKeyword
  */
  propertyName = kebabCase
  
  /* -------------------------------------------------------------------------- */
  /* property Value                                                             */
  /* -------------------------------------------------------------------------- */
  
  PropertyValue = PropertyValueBase | kebabCase
  
  /* -------------------------------------------------------------------------- */
  /* Selector                                                                   */
  /* -------------------------------------------------------------------------- */
  
  /* Selector list */
  SelectorList = Selector ("," Selector)*
  
  /* Selector */
  Selector = AtomicSelector SelectorElem*
  SelectorElem = 
    | combinator ~"&" AtomicSelector -- edge
    | ~"&" AtomicSelector -- node
  AtomicSelector = 
    | basicSelector PseudoSelector -- composite
    | basicSelector -- basic
    | PseudoSelector -- omission
  
  /* whole Selector */
  basicSelector = attributeSelector | htmlTagSelector | constantSelector
  
  /* Pseudo Selector */
  PseudoSelector = 
    | Pseudo -- atom
    | ~PseudoFunc Pseudo Pseudo* -- molecule
  
  /* Pseudo */
  Pseudo = PseudoFunc | PseudoElement | PseudoClass
  PseudoFunc = 
    | PseudoElement "(" PseudoArg ")" -- element
    | PseudoClass "(" PseudoArg ")" -- class
  PseudoElement = "::" kebabCase
  PseudoClass = ":" kebabCase
  PseudoArg = nth | propsFunc | Selector | letter+ | digit+ 
}

Syrm <: Base {
  Root := Region*
  
  Region = Cascade | Collection | Region
  
  Cascade = "<Cascade>" space* (~CascadeInnerOther inner)* space* "</Cascade>"
  CascadeInnerOther = "</Cascade>" | "<Collection>"
  
  Collection = "<Collection>" space* (~CollectionInnerOther inner)* space* "</Collection>"
  CollectionInnerOther = "</Collection>" | "<Cascade>"
  
  inner = any | space
}